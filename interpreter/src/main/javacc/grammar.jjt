options {
    STATIC=false;
    TRACK_TOKENS=true;
}

PARSER_BEGIN(ProgramParser)
    package com.borunovv.jetpreter.javacc.generated;
    public class ProgramParser {
        /**
         * Returns the root node of the AST.
         * It only makes sense to call this after a successful parse.
         * @return the root node
         */
        public Node rootNode() {
            return jjtree.rootNode();
        }
    }
PARSER_END(ProgramParser)


SKIP : /* WHITE SPACE */
{
  " " | "\t"
}

TOKEN : /*KEY WORDS*/
{
    < KW_VAR   : "var" >
|   < KW_PRINT : "print" >
|   < KW_OUT   : "out" >
|   < KW_LAMBDA_ARROW : "->" >
}

TOKEN : /* LITERALS */
{
    < EOL          : "\n" | "\r" | "\r\n" >
|   < EQUALS       : "=" >
|   < PLUS         : "+" >
|   < MINUS        : "-" >
|   < MULTIPLY     : "*" >
|   < DIVIDE       : "/" >
|   < POWER_OP     : "^" >
|   < FLOAT        : <DIGITS> "." (<DIGITS>)? | "." <DIGITS> >
|   < INTEGER      : <DIGITS> >
|   < IDENTIFIER   : <LETTER> (<LETTER> | <DIGIT> | "_")* >
|   < QUOTED_STR   : "\"" (~["\""])* "\"">
|   < #LETTER      : ["A" - "Z", "a" - "z"] >
|   < #DIGIT       : ["0" - "9"] >
|   < #DIGITS      : (<DIGIT>)+ >
}


void Program() :
{}
{
    (Line())* <EOF>
}


void Line() :
{}
{
    [ Statement() ] <EOL>
}


void Statement() #void:
{}
{
    (
        VarDeclaration()
      |
        VarAssignment()
      |
        IOStatement()
    )
}


void VarDeclaration() :
{}
{
   <KW_VAR> <IDENTIFIER> <EQUALS> Expression()
}


void VarAssignment() :
{}
{
   <IDENTIFIER> <EQUALS> Expression()
}


void IOStatement() #void:
{}
{
    (
        PrintStatement()
      |
        OutStatement()
    )
}


void PrintStatement() :
{}
{
    <KW_PRINT> <QUOTED_STR>
}


void OutStatement() :
{}
{
    <KW_OUT> Expression()
}


void Expression() #void:
{}
{
    AddOperation() | Range()
}


void AddOperation() :
{}
{
    MulOperation() ( AddOperator() MulOperation() )*
}


void MulOperation() :
{}
{
    PowerOperation() ( MulOperator() PowerOperation() )*
}


void PowerOperation() :
{}
{
    Factor() [ PowerOperator() Factor() ]
}


void Factor() #void :
{}
{
    SignedFactor()
}


void SignedFactor() :
{}
{
    [<MINUS>]
    (
        Number()
      |
        LOOKAHEAD(2)
        FunctionCall()
      |
        VarId()
      |
        "(" Expression() ")"
    )
}


void AddOperator() :
{}
{
    <PLUS>
  |
    <MINUS>
}


void MulOperator() :
{}
{
    <MULTIPLY>
  |
    <DIVIDE>
}


void PowerOperator() :
{}
{
    <POWER_OP>
}


void Number() #void :
{}
{
    (
        IntNumber()
      |
        FloatNumber()
    )
}


void IntNumber() :
{}
{
    <INTEGER>
}


void FloatNumber() :
{}
{
    <FLOAT>
}


void VarId() :
{}
{
    <IDENTIFIER>
}


void FunctionCall() :
{}
{
    <IDENTIFIER> "(" ParameterList() ")"
}


void ParameterList() #void:
{}
{
    [Parameter() ("," Parameter())*]
}


void Parameter() #void:
{}
{
    LOOKAHEAD(3) /*Here we assume lambda has no more than 2 arguments*/
    Lambda()
  |
    Expression()
}


void Lambda() :
{}
{
    VarId() [ VarId() ] <KW_LAMBDA_ARROW> Expression()
}


void Range() :
{}
{
    "{" Expression() "," Expression() "}"
}